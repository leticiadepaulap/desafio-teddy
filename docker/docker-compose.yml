version: '3.8'

x-airflow-common: &airflow-common
  build: 
    context: ..
    dockerfile: docker/Dockerfile
  image: custom-airflow:latest
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
    AIRFLOW__CORE__FERNET_KEY: B0hQySep0n5bnqxuZ-AJsdtCxRe77VmWBGc2L9UAjAc=
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__CORE__DAG_DISCOVERY_SAFE_MODE: 'false'
  volumes:
    - ../dags:/opt/airflow/dags
    - ../logs:/opt/airflow/logs
    - ../plugins:/opt/airflow/plugins
    - ../src:/opt/airflow/src
  depends_on:
    airflow-db:
      condition: service_healthy

services:
  airflow-db:
    image: postgres:15
    container_name: airflow-db
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    volumes:
      - airflow-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 30s

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c "
      echo 'Aguardando banco de dados...';
      until pg_isready -h airflow-db -p 5432 -U airflow; do sleep 2; done;
      echo 'Inicializando banco do Airflow...';
      airflow db init;
      echo 'Criando usu√°rio admin...';
      airflow users create \
        --username admin \
        --password airflow \
        --firstname Admin \
        --lastname User \
        --role Admin \
        --email admin@example.com;
      echo 'Setup completo!';
      "
    depends_on:
      airflow-db:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: unless-stopped
    command: scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    restart: unless-stopped
    command: webserver
    ports:
      - "8080:8080"
    depends_on:
      airflow-init:
        condition: service_completed_successfully

volumes:
  airflow-db-volume: